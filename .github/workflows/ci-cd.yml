name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov requests
    
    - name: Test application import
      run: |
        python -c "import app; print('App imports successfully')"
    
    - name: Run tests with coverage
      run: |
        python -m pytest tests/ --cov=app --cov-report=xml --cov-report=html
    
    - name: Upload coverage reports to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
    
    - name: Upload coverage artifacts
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: htmlcov/

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install safety bandit
    
    - name: Run safety check
      run: |
        safety check -r requirements.txt
    
    - name: Run bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-report
        path: bandit-report.json

  code-quality:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: 3.11
        cache: 'pip'
    
    - name: Install code quality tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 pylint black isort
    
    - name: Run flake8
      run: |
        flake8 --max-line-length=88 --extend-ignore=E203,W503 app.py
    
    - name: Check black formatting
      run: |
        black --check app.py
    
    - name: Check isort formatting
      run: |
        isort --check-only app.py
    
    - name: Run pylint
      run: |
        pylint app.py --exit-zero --output-format=json > pylint-report.json
    
    - name: Upload quality artifacts
      uses: actions/upload-artifact@v4
      with:
        name: quality-report
        path: pylint-report.json

  build:
    runs-on: ubuntu-latest
    needs: [test, security-scan, code-quality]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' || github.ref == 'refs/heads/develop'
    
    permissions:
      contents: read
      packages: write
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy-staging:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/master'
    environment:
      name: staging
      url: ${{ vars.STAGING_URL }}
    
    steps:
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        if [ -n "${{ secrets.STAGING_DEPLOY_WEBHOOK }}" ]; then
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"image\":\"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\"}" \
            ${{ secrets.STAGING_DEPLOY_WEBHOOK }}/webhook/manual || echo "Staging deployment webhook failed"
        else
          echo "STAGING_DEPLOY_WEBHOOK not configured, skipping webhook deployment"
        fi
        echo "Staging deployment completed"

  deploy-production:
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    environment:
      name: production
      url: ${{ vars.PRODUCTION_URL }}
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        if [ -n "${{ secrets.PRODUCTION_DEPLOY_WEBHOOK }}" ]; then
          curl -X POST \
            -H "Content-Type: application/json" \
            -d "{\"image\":\"${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}\"}" \
            ${{ secrets.PRODUCTION_DEPLOY_WEBHOOK }}/webhook/manual || echo "Production deployment webhook failed"
        else
          echo "PRODUCTION_DEPLOY_WEBHOOK not configured, skipping webhook deployment"
        fi
        echo "Production deployment completed"

  health-check:
    runs-on: ubuntu-latest
    needs: deploy-production
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Health check
      run: |
        echo "Performing health check..."
        sleep 30  # Wait for service to start
        if [ -n "${{ vars.HEALTH_CHECK_URL }}" ]; then
          for i in {1..5}; do
            if curl -f ${{ vars.HEALTH_CHECK_URL }}/health; then
              echo "Health check passed"
              exit 0
            fi
            echo "Health check attempt $i failed, retrying..."
            sleep 10
          done
          echo "Health check failed after 5 attempts"
          exit 1
        else
          echo "HEALTH_CHECK_URL not configured, skipping health check"
        fi
